README

DCD and PDB Analysis Functions

Author: William Cornell
Summer '14


COMMAND LINE

This program accepts 2, 3, or 4 additional command line arguments,
in the following order:
	$ ./<program_name> <protein_name> <sim_type> <setup_file> <analysis_function>

protein_name - Name of protein
sim_type - simulation type, either pull or equil
setup_file - optional argument specifying the filename/path of 
             a setup file (format in SETUP section)
analysis_function - if setup file is given, optional argument 
                    specifying the analysis function to be run



FILE STRUCTURE

The expected file structure is as follows:

                 Parent Directory
                 /      |       \
 analysis_program  protein_name  setup_file
                   /    |     \
           sim_type structures topology
           /  |   \
        dat  dcd  structures



MAIN

The main.c file contains the main function. This handles
command line and prompted user input, runs a one time 
setup function specific to the analysis program that is 
being run (usually memory allocation and any extra user input),
runs the analysis function itself, looped over each trajectory,
then runs a function-specific post analysis function (deallocation
and any optional parts, such as file averaging and file cleanup).
Main also times the analysis portion of the program in CPU time.

The three analysis-specific portions handled by main are
accomplished with function pointers, stored in the single setup_data
struct, and assigned to based on the setup structs function_name string.



SETUP

The setup.c and .h files contain definitions of the setup_data
struct as a type, as well as a function to populate it with 
parameters from the optional setup file, if provided.

The setup_data struct contains all data from command line as well
as the setup file/prompted input that is needed by all programs,
namely protein_name, function_name, run numbers, and frame numbers.
It also contains function specific sections for analysis function,
each labeled as to which function requires them.

Setup file format is as follows:

	runstart	<number>   (first trajectory number)
	runcount	<number>   (number of trajectories to run)
	start_frame	<number>   (first frame)
	end_frame	<number>   (last frame, inclusive)

where the values are separated from their label by a SINGLE TAB,
not spaces. Make sure your text editor doesn't insert spaces instead
of a tab ("\t") character.



NEWDCDIO

Distinct from dcdio.c, included in the SOP source code, this file
contains the functions necessary to read in DCD files, as well
as a function that reads in an entire DCD file and runs an analysis
function via the function pointers stored in the setup_data struct
passed into the function by pointer.

Expected DCD file format is as follows:
	<protein_name>_<run_number>_<sim_type>.dcd
and should be located in the dcd directory in the above diagram.



PAIRDIST

The functions in pairdist.c prompt the user for a number of pairs,
then for the RESIDs of each member of each pair. These RESIDs are
then mapped to indices using the reference pdb in the structures
directory. The function then outputs .dat files to the dat
directory of the distance between each pair in each frame specified
in the setup file or prompted for. The user is then able to have
the seperate files for each trajectory averaged for each pair into 
a single file and, if so, the user also has the option to erase the
separate files, leaving only the averaged files.
Output file format: 
  pairdist_<RESID1>-<RESID2>_<trajectory>.dat



PDBIO

The pdbio functions create files in PDB format of each frame in
each DCD specified. This uses the XYZ positions from the DCD files
and the PDB specific data from the reference PDB file specified in
the setup file. Output files are compatible with PDB readers, 
such as VMD.
Output file format: 
  <protein_name>_<frame>_<trajectory>.pdb



COVAR

The covar.c file includes a CPU-only version of a function that uses
the specified frames and trajectories to create an N x N covariance
matrix of values betwee -1 and 1. Covariance is calculated relative
to the specified start_frame. The output file is averaged over
all frames and all trajectories and in matrix format of
space-separated columns and new-line-separated rows.
Output file format: 
  covar_<protein_name>_<start_frame>_<end_frame>_<runstart>_<runend>.dat



COVARGPU

GPU accelerated version of COVAR that is ~100 times faster. Prompts the
user for a GPU ID (0 to number of GPUs -1)



ADDING NEW MODULES

There are 6 steps to adding new modules or functions to this program:
1. Include a header file of function declarations in main.c
2. Include a brief description in the HELP PAGE section of COMMAND LINE
   in main.c.
3. Include a check in PROGRAM PROMPT CHECK under COMMAND LINE in main.c
   and assign the entered string to setup.function_name
4. Include assignment of function pointers for pre-analysis, analysis,
   and post-analysis functions in FUNCTION POINTER ASSIGNMENT in main.c
5. In your function's header file, include setup.h
6. Add any relevant variables needed from setup to the setup_data struct 
   defined in setup.h





